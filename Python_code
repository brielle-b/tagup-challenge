import numpy as np
import psycopg2
import pygrametl
from pygrametl.datasources import SQLSource, CSVSource
from pygrametl.tables import Dimension, FactTable
import pandas as pd
import sqlite3
import xarray as xr
from scipy.stats import describe
import matplotlib.pyplot as plt
from sqlalchemy import create_engine, inspect
con = sqlite3.connect("/Users/briellebalswick/Downloads/exampleco_db.db")
# The result of a "cursor.execute" can be iterated over by row
cur = con.cursor()

feat_0 = pd.read_sql_query("SELECT * from feat_0", con)#.groupby(["machine"]).mean()
#print(feat_0)
feat_1=pd.read_sql_query("SELECT * from feat_1", con)#.groupby(["machine"]).mean()
#print(feat_1)
feat_2=pd.read_sql_query("SELECT * from feat_2", con)#.groupby(["machine"]).mean()
#print(feat_2)
feat_3=pd.read_sql_query("SELECT * from feat_3", con)#.groupby(["machine"]).mean()
#print(feat_3)

equipment = xr.DataArray(np.array([feat_0,feat_1,feat_2,feat_3]),dims=("feat","rows","cols"))
#print(equipment["feat"])

# analyze by feat table first and see note any distinct difference between tables
for i in range(4):
    '''plt.scatter(equipment[i,:,1],equipment[i,:,2])
    plt.show()'''
    stats=pd.Series(equipment[i,:,2]).describe()
    print("feat",str(i), ": ",stats)

# remove outliers
cleaned=[]
'''for i in range(4):
    MEAN= np.mean(equipment[i,:,2])
    STDEV= np.std(np.array(equipment[i,:,2]))
    lower_bound= MEAN-(STDEV*2)
    upper_bound= MEAN+(STDEV*2)
    no_outliers = [True if x<upper_bound and x>lower_bound else False for x in equipment[i,:,2]]
    cleaned.append(equipment[i,no_outliers,:])

# combine feat and machines into one array with outliers removed now and re analyze
CLEAN_DATA = np.concatenate((cleaned[0],cleaned[1],cleaned[2],cleaned[3]))
print(CLEAN_DATA.shape)
# run summary statistics again to see what spread looks like now

Stats = pd.Series(CLEAN_DATA[:, 2]).describe()
print("Overall:",stats)'''

feat_0 = pd.read_sql_query("SELECT * from feat_0", con)
feat_1=pd.read_sql_query("SELECT * from feat_1", con)
feat_2=pd.read_sql_query("SELECT * from feat_2", con)
feat_3=pd.read_sql_query("SELECT * from feat_3", con)
static= pd.read_sql_query("SELECT * FROM static_data",con)
complete_data= pd.concat([feat_0,feat_1,feat_2,feat_3])

install_date=dict(zip(list(static["machine_id"]),list(static["install_date"])))
Model=dict(zip(list(static["machine_id"]),list(static["model"])))
room=dict(zip(list(static["machine_id"]),list(static["room"])))
complete_data["install_date"] = complete_data["machine"].map(install_date)
complete_data["model"] = complete_data["machine"].map(Model)
complete_data["room"] = complete_data["machine"].map(room)

'''plt.boxplot(complete_data.value)
plt.show()'''
# filter out the faulty group
non_faulty= complete_data[(complete_data.value<200) & (complete_data.value>-200)]
print(len(non_faulty))
plt.boxplot(non_faulty.value)
plt.show()
new_arr= xr.DataArray(np.array(complete_data),  dims=("rows","cols"))
plt.scatter(non_faulty.machine,non_faulty.value)
plt.show()
print(non_faulty.groupby(["machine"]).describe())
final_arr= xr.DataArray(np.array(non_faulty), dims=("rows","columns"))
grouped =non_faulty.groupby(["machine","timestamp"]).describe()
print(grouped)
